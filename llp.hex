#include <Softwareserial.h> 
#include <Liquidcrystal.h> 
#define FALSE false 
 
inttriggerl=A4;  
int trigger2=A2;  
int trigger3=A1;  
int trigger4=12;  
intechol=A5;  
int echo2=A3;  
int echo3=A0;  
int echo4=13;  
 
int led=5;  
int buzzer=4;  
int distance=0;  
int g1=0;  
int g2=0;  
70 
 
int g3=0;  
int g4=0; int time=0;  
intupdate_st = 0;  
intsetPointl = 0;  
int setPoint2 = 0;  
int setPoint3 = 0;  
int setPoint4 = 0; 
 
intlast_dist = 0,stability=0;  
String strl="GET /Gbin.aspx?id=5463&gl=";  
String str2="&g2=";  
String str3="&g3=";  
String str4="&g4=";  
String str5=" HTTP/1.1\r\n";  
 
Softwareserialesp8266(2,3); // make RX Arduino line is pin 2, make TX Arduino line is pin 3. // This means that you need to connect the TX line from the esp to the Arduino's pin 2 // and the RX line from the esp to the Arduino's pin 3  
LiquidCrystallcd(6, 7, 8, 9, 10, 11);  
String response = "";  
voidsetcheckPoint();  
71 
 
intbinscan(int,int,int);  
void setup()  
{ 
Serial.begin(9600);  
String response = ""; 
voidsetcheckPoint();  
intbinscan(int,int,int);  
void setup()  
{ 
Serial.begin(9600); 
esp8266.begin(9600); // your esp's baud rate might be different  
lcd.begin(16, 2);  
 
pinmode(triggerl,OUTPUT) 
pinmode(trigger2,OUTPUT)  
pinmode(trigger3,OUTPUT)  
pinmode(trigger4,OUTPUT)  
pinmode(echol,INPUT)  
pinmode(echo2,INPUT) 
pinmode(echo3,INPUT) 
pinmode(echo4,INPUT) 
72 
 
pinmode(led,OUTPUT); 
pinmode(buzzer,OUTPUT);  
 
lcd.clear(); 
lcd.print(" lOT Based"); 
lcd.setcursor(0,1); 
lcd.print(" Liquid Monitor");  
 
sendData("AT+RST\r\n",2000,DEBUG) //RESET MODULE 
//  sendData("AT+CWSAP=\"ESP_8266\",\"pwd\",5,3\r\n",10000,DEBUG);  
sendData("AT+CWJAP=\"iotgarbage\",\"project1234\"\r\n",10000,DEBUG); 
sendData("AT+CIFSR\r\n",5000,DEBUG); // get ipaddr 
 
lcd.clear(); 
setcheckPoint(); 
 // delay(1000); 
lcd.clear();  
} 
 
void loop()  
{ 
73 
 
 
sensor(triggerl,echol); 
if(distance < 0 || distance >setPointl )  
distance=0; 
distance = 10-(((float)(distance)/(setPoint1))*10.0); 
gl=distance+2; 
 // if(gl>=10) g1=10; 
 // if(gl<=0 II distance<=0) g1=0;  
 
 
 
checkstatus(1,g1,0,0); 
sensor(trigger2,echo2); 
if(distance < 0 II distance > setPoint2 )  
distance=0; 
distance=10-(((float)(distance)/(setPoint2))*10.0); 
 g2=distance+2; 
 // if(g2>=10) g2=10; 
 // if(g2<=0 II distance<=0) g2=0; 
checkstatus(2,g2,10,0); 
 
74 
 
sensor(trigger3,echo3); 
if(distance < 0 || distance > setPoint3) 
distance=0; 
distance= 10-(((float)(distance)/(setPoint g3=distance+2; 
 // if(g3>=10) g3=10; 
 // if(g3<=0 || distance<=0) g3=0; 
checkstatus(3,g3,0,1); 
 
sensor(trigger4,echo4); 
if(distance < 0 || distance > setPoint4 ) 
distance=0; 
distance=10-(((float)(distance)/(setPoint4))*10.0); 
 g4=distance+2; 
 // if(g4>=10) g4=10; 
 // if(g4<=0 II distance<=0) g4=0; 
checkstatus(4,g4,10,1);  
 
//   sendData("AT+CIPSTART=4,\"TCP\",\"www.nevemtech.com\",80\r\n",5000,DEBUG); 
 //   /* if(response[2] == 'b' && response[3] == 'u' && response[4] = is' && response[5] == 'y') delay(2000); */ 
//   sendData("AT+CIPSEND=4,100\r\n',100,DEBUG); 
75 
 
 // //  if(response[2] == 'b' && response[3] == 'u' && response[4] = 's' && response[5] == 'y')  delay(5000); 
 // sendData("GET /Gbin.aspx?id=2190&g1=10&g2=0&g3=10&g4=0 HTTP/1.1\r\n",1000,DEBUG); 
 String str=strl+ gl +str2+ g2 +str3+ g3 +str4+ g4 +str5; 
sendData(str,100,DEBUG); 
 // if(response[2] == 'b' && response[3] = 'u' && response[4] == 's' && response[5] = 'y') delay(5000);  
 
sendData("AT+CWMODE=3\r\n",1000,DEBUG); 
sendData("AT+CWAP=\"iotgarbage\",\"project1234\"\r\n",10000,DEBUG); 
sendData("AT+CIFSR\r\n",5000,DEBUG); // get ip address  
// delay(1000); 
lcd.clear();  
} 
 
/* * Name: sendData 
* Description: Function used to send data to E5P8266.  
* Params: command - the data/command to send; timeout - the time to wait for a response; debug - print to serial window?(true = yes, false = no)  
* Returns: The response from the esp8266 (if there is a reponse)  
*/ 
76 
 
 
String sendData(string command, constint timeout, boolean debug)  
{  
response = ""; 
longint time = millis(); 
whie(  (time+timeout) >millis()) 
    { 
while(esp8266.available()) 
       { 
char c = esp8266.read(); 
       } 
     } 
if(debug) 
  { 
Serial.print(response); 
  } 
return response; 
} 
void sensor(inttriggerpin,intechopin)  
{ 
digitalwrite(triggerpin,Low); 
77 
 
delaymicroseconds(2); 
digitalwrite(triggerpin,HIGH); 
delaymicroseconds(10); 
digitalwrite(triggerpin,Low); 
time=pulsein(echopin,HIGH); 
 } 
 
voidcheckstatus(intbinNo,intl,intcol,int row)  
{ 
if(1>=9) 
 { 
tone(buzzer,50,5000); 
digitalwrite(led,HIGH); 
 } 
else 
 { 
digitalwrite(led,Low); 
 } 
lcd.setcursor(col,row); 
lcd.print("B"); 
lcd.print(binNo); 
78 
 
lcd.print(":"); 
lcd.print(1);  
} 
 
voidsetcheckPoint()  
{ 
setPointl = binscan(1,triggerl,echol); 
 setPoint2 = binscan(2,trigger2,echo2); 
 setPoint3 = binscan(3,trigger3,echo3); 
 setPoint4 = binscan(4,trigger4,echo4); 
 } 
intbinscan(intbinNo, inttriggpin, intechopin) 
 {  
last_dist = 0,stability=0; 
sensor(triggpin,echopin); 
last_dist = distance; 
while(stability<4)  
{ 
stability = 0; 
for(inti=0;i<5;i++)  
{ 
79 
 
sensor(triggpin,echopin); 
lcd.clear(); 
lcd.print(distance); 
lcd.print("cm"); 
delay(200); 
if(distance = last_dist)  
} // last_dist = distance;  
} 
lcd.clear(); 
lcd.print("Bin "); 
lcd.print(binNo); 
lcd.print(" Empty");  
 
 }  
 lcd.clear();  
 lcd.print("Bin ");  
 lcd.print(binNo);  
 lcd.print(" Empty");  
 lcd.setcursor(0,1);  
 lcd.print("Bistance: ");  
 lcd.print(distance);  
80 
 
 lcd.print("cm");  
 delay(5000);  
return distance;  
 }  
 intcheckstability(int t, int e, int s)  
 { 
 for(inti=0;i<5;i++)  
   {  
 sensor(t,e);  
 if(distance < 0 11 distance > s )  
 distance=0;  
   } 
 } 
 